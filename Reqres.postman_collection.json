{
	"info": {
		"_postman_id": "4661ef7a-53f6-478d-9e86-3201201cb94a",
		"name": "Reqres",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "18867762"
	},
	"item": [
		{
			"name": "List Users",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"const jsonData = pm.response.json();\r",
							"const page_info_list = [jsonData.per_page,jsonData.total,jsonData.total_pages];\r",
							"\r",
							"pm.test(\"Page is 2\", function () {\r",
							"    pm.expect(jsonData.page).to.eql(2);\r",
							"});\r",
							"\r",
							"pm.test(\"Verify Page 2 elements have numbers\", function () {\r",
							"    pm.expect(page_info_list.every > 0);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/api/users?page=2",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"users"
					],
					"query": [
						{
							"key": "page",
							"value": "2"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Single User",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Id is 2\", function () {\r",
							"    let jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.data.id).to.eql(2);\r",
							"});\r",
							"\r",
							"const first_name = pm.response.json().data.first_name;\r",
							"const last_name = pm.response.json().data.last_name;\r",
							"const avatar = pm.response.json().data.avatar;\r",
							"const email = pm.response.json().data.email;\r",
							"const data_list = [first_name,last_name,avatar,email];\r",
							"\r",
							"pm.test(\"Verify data object has string values\", function () {\r",
							"    pm.expect(data_list.every).to.be.string;\r",
							"});\r",
							"\r",
							"const url = pm.response.json().support.url;\r",
							"const text = pm.response.json().support.text;\r",
							"\r",
							"pm.test(\"Verify support element values\", function () {\r",
							"    pm.expect(url).to.equal(\"https://reqres.in/#support-heading\");\r",
							"    pm.expect(text).to.equal(\"To keep ReqRes free, contributions towards server costs are appreciated!\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/api/users/2",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"users",
						"2"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"pm.test(\"Staus is Created\",()=> {\r",
							"    pm.expect(\"Created\").eql(pm.response.status)\r",
							"})\r",
							"\r",
							"const firstName = pm.environment.get(\"firstName\");\r",
							"\r",
							"pm.test(\"Name is the same as what is set\", function () {\r",
							"    pm.expect(pm.response.json().name).to.equal(firstName);\r",
							"});\r",
							"pm.test(\"Id must be greater than 0\", function () {\r",
							"    pm.expect(pm.response.json().id > 0);\r",
							"});\r",
							"\r",
							"const today = new Date();\r",
							"const date = today.toISOString().split('T')[0];\r",
							"\r",
							"pm.test(\"Verify created date is today\" , function () {\r",
							"    pm.expect(pm.response.json().createdAt.substring(0,10)).to.equal(date);\r",
							"})"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const name = pm.environment.replaceIn(\"{{$randomFirstName}}\");\r",
							"console.log(name)\r",
							"pm.environment.set(\"firstName\", name);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"{{firstName}}\",\r\n    \"job\": \"Test Automation Engineer\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/api/users",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"const firstName = pm.environment.get(\"firstName\");\r",
							"\r",
							"pm.test(\"Name is the same as what is updated\", function () {\r",
							"    pm.expect(pm.response.json().name).to.equal(firstName + \" John\");\r",
							"});\r",
							"\r",
							"pm.test(\"Job is the same as what is updated\", function () {\r",
							"    pm.expect(pm.response.json().job).to.equal(\"Software Test Engineer\");\r",
							"});\r",
							"\r",
							"const today = new Date();\r",
							"const date = today.toISOString().split('T')[0];\r",
							"\r",
							"pm.test(\"Verify updated date is today\" , function () {\r",
							"    pm.expect(pm.response.json().updatedAt.substring(0,10)).to.equal(date);\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"{{firstName}} John\",\r\n    \"job\": \"Software Test Engineer\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/api/users/2",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"users",
						"2"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 204\", function () {\r",
							"    pm.response.to.have.status(204);\r",
							"});\r",
							"pm.test(\"Response time is less than 500ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/api/users/2",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"users",
						"2"
					]
				}
			},
			"response": []
		},
		{
			"name": "Partial Update",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Job is the same as what is updated\", function () {\r",
							"    pm.expect(pm.response.json().job).to.equal(\"Product Owner\");\r",
							"});\r",
							"\r",
							"const today = new Date();\r",
							"const date = today.toISOString().split('T')[0];\r",
							"\r",
							"pm.test(\"Verify updated date is today\" , function () {\r",
							"    pm.expect(pm.response.json().updatedAt.substring(0,10)).to.equal(date);\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"job\": \"Product Owner\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/api/users/2",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"users",
						"2"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Users Using CSV File",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"pm.test(\"Staus is Created\",()=> {\r",
							"    pm.expect(\"Created\").eql(pm.response.status)\r",
							"})\r",
							"\r",
							"pm.test(\"Verify user information\", function () {\r",
							"    pm.expect(pm.response.json().name).to.equal(pm.iterationData.get(\"name\"));\r",
							"    pm.expect(pm.response.json().job).to.equal(pm.iterationData.get(\"job\"));\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"{{name}}\",\r\n    \"job\": \"{{job}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/api/users",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"users"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"console.log(\"The request about to be run is -> \", pm.info.requestName);"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}